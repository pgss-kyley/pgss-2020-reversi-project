import java.awt.*; 
import javax.swing.*;
import java.util.ArrayList;
import java.util.concurrent.ThreadLocalRandom;


/**
 *
 * @author kyley
 */
public class ReversiBoard extends javax.swing.JFrame {

    /**
     * Creates new form ReversiBoard
     */
    public ReversiBoard() {
        initComponents();
    }
    
    public static int[][] arrayBoard = new int[8][8];
    public static JButton[][] boardList = new JButton[8][8];
    public static boolean aiCanMove = true;
    int whiteWins = 0; int blackWins = 0; int draws = 0;
    int trials = 0;
    public static final int totalTrials = 100;
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextField1 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();
        jMenu5 = new javax.swing.JMenu();
        jPanel3 = new javax.swing.JPanel();
        scoreField1 = new javax.swing.JTextField();
        scoreField2 = new javax.swing.JTextField();
        score1Field = new javax.swing.JTextField();
        score2Field = new javax.swing.JTextField();
        exitButton = new javax.swing.JButton();
        resetButton = new javax.swing.JButton();
        tile_0_0 = new javax.swing.JButton();
        tile_0_1 = new javax.swing.JButton();
        tile_0_7 = new javax.swing.JButton();
        tile_0_6 = new javax.swing.JButton();
        tile_0_5 = new javax.swing.JButton();
        tile_0_4 = new javax.swing.JButton();
        tile_0_3 = new javax.swing.JButton();
        tile_0_2 = new javax.swing.JButton();
        tile_1_0 = new javax.swing.JButton();
        tile_1_1 = new javax.swing.JButton();
        tile_1_2 = new javax.swing.JButton();
        tile_1_3 = new javax.swing.JButton();
        tile_1_4 = new javax.swing.JButton();
        tile_1_5 = new javax.swing.JButton();
        tile_1_6 = new javax.swing.JButton();
        tile_1_7 = new javax.swing.JButton();
        tile_2_7 = new javax.swing.JButton();
        tile_2_6 = new javax.swing.JButton();
        tile_2_5 = new javax.swing.JButton();
        tile_2_4 = new javax.swing.JButton();
        tile_2_3 = new javax.swing.JButton();
        tile_2_2 = new javax.swing.JButton();
        tile_2_1 = new javax.swing.JButton();
        tile_2_0 = new javax.swing.JButton();
        tile_3_5 = new javax.swing.JButton();
        tile_3_7 = new javax.swing.JButton();
        tile_3_6 = new javax.swing.JButton();
        tile_3_0 = new javax.swing.JButton();
        tile_3_2 = new javax.swing.JButton();
        tile_3_4 = new javax.swing.JButton();
        tile_3_3 = new javax.swing.JButton();
        tile_3_1 = new javax.swing.JButton();
        tile_4_0 = new javax.swing.JButton();
        tile_4_2 = new javax.swing.JButton();
        tile_4_6 = new javax.swing.JButton();
        tile_4_5 = new javax.swing.JButton();
        tile_4_1 = new javax.swing.JButton();
        tile_4_3 = new javax.swing.JButton();
        tile_4_7 = new javax.swing.JButton();
        tile_4_4 = new javax.swing.JButton();
        tile_5_0 = new javax.swing.JButton();
        tile_5_6 = new javax.swing.JButton();
        tile_5_3 = new javax.swing.JButton();
        tile_5_7 = new javax.swing.JButton();
        tile_5_4 = new javax.swing.JButton();
        tile_5_1 = new javax.swing.JButton();
        tile_5_2 = new javax.swing.JButton();
        tile_5_5 = new javax.swing.JButton();
        tile_6_1 = new javax.swing.JButton();
        tile_6_6 = new javax.swing.JButton();
        tile_6_0 = new javax.swing.JButton();
        tile_6_4 = new javax.swing.JButton();
        tile_6_2 = new javax.swing.JButton();
        tile_6_5 = new javax.swing.JButton();
        tile_6_3 = new javax.swing.JButton();
        tile_6_7 = new javax.swing.JButton();
        tile_7_1 = new javax.swing.JButton();
        tile_7_6 = new javax.swing.JButton();
        tile_7_5 = new javax.swing.JButton();
        tile_7_3 = new javax.swing.JButton();
        tile_7_4 = new javax.swing.JButton();
        tile_7_7 = new javax.swing.JButton();
        tile_7_0 = new javax.swing.JButton();
        tile_7_2 = new javax.swing.JButton();

        jTextField1.setText("jTextField1");

        jButton1.setText("jButton1");

        jMenu1.setText("File");
        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        jMenu5.setText("jMenu5");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(153, 255, 255));

        jPanel3.setBackground(new java.awt.Color(0, 0, 0));

        scoreField1.setEditable(false);
        scoreField1.setBackground(new java.awt.Color(0, 0, 0));
        //indicates first move is user's turn
        scoreField1.setFont(new Font("Arial Black", Font.BOLD+Font.ITALIC, 24)); // NOI18N
        scoreField1.setForeground(new java.awt.Color(255, 255, 255));
        scoreField1.setText("Computer (White)");
        scoreField1.setBorder(null);
        scoreField1.setMargin(new java.awt.Insets(0, 0, 0, 0));

        scoreField2.setEditable(false);
        scoreField2.setBackground(new java.awt.Color(0, 0, 0));
        scoreField2.setFont(new java.awt.Font("Arial Black", 0, 24)); // NOI18N
        scoreField2.setForeground(new java.awt.Color(255, 255, 255));
        scoreField2.setText("Player (Black)");
        scoreField2.setBorder(null);

        score1Field.setEditable(false);
        score1Field.setBackground(new java.awt.Color(0, 0, 0));
        score1Field.setForeground(new java.awt.Color(255, 255, 255));
        score1Field.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        score1Field.setText("2");
        score1Field.setBorder(null);
        score1Field.setMargin(new java.awt.Insets(0, 0, 0, 0));
        score1Field.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                score1FieldActionPerformed(evt);
            }
        });

        score2Field.setEditable(false);
        score2Field.setBackground(new java.awt.Color(0, 0, 0));
        score2Field.setForeground(new java.awt.Color(255, 255, 255));
        score2Field.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        score2Field.setText("2");
        score2Field.setBorder(null);
        score2Field.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                score2FieldActionPerformed(evt);
            }
        });

        exitButton.setBackground(new java.awt.Color(0, 0, 0));
        exitButton.setForeground(new java.awt.Color(255, 255, 255));
        exitButton.setText("Exit");
        exitButton.setBorder(null);
        exitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitButtonActionPerformed(evt);
            }
        });

        resetButton.setBackground(new java.awt.Color(0, 0, 0));
        resetButton.setForeground(new java.awt.Color(255, 255, 255));
        resetButton.setText("Reset");
        resetButton.setBorder(null);
        resetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetButtonActionPerformed(evt);
            }
        });

        tile_0_0.setBackground(new java.awt.Color(47, 173, 81));
        //test font color
        tile_0_0.setForeground(new java.awt.Color(255,255,255));
        tile_0_0.setFont(new java.awt.Font("Arial", 0, 72)); // NOI18N
        tile_0_0.setBorder(null);
        tile_0_0.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tile_0_0ActionPerformed(evt);
            }
        });

        tile_0_1.setBackground(new java.awt.Color(47, 173, 81));
        tile_0_1.setFont(new java.awt.Font("Arial", 0, 72)); // NOI18N
        tile_0_1.setBorder(null);
        tile_0_1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tile_0_1ActionPerformed(evt);
            }
        });

        tile_0_7.setBackground(new java.awt.Color(47, 173, 81));
        tile_0_7.setFont(new java.awt.Font("Arial", 0, 72)); // NOI18N
        tile_0_7.setBorder(null);
        tile_0_7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tile_0_7ActionPerformed(evt);
            }
        });

        tile_0_6.setBackground(new java.awt.Color(47, 173, 81));
        tile_0_6.setFont(new java.awt.Font("Arial", 0, 72)); // NOI18N
        tile_0_6.setBorder(null);
        tile_0_6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tile_0_6ActionPerformed(evt);
            }
        });

        tile_0_5.setBackground(new java.awt.Color(47, 173, 81));
        tile_0_5.setFont(new java.awt.Font("Arial", 0, 72)); // NOI18N
        tile_0_5.setBorder(null);
        tile_0_5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tile_0_5ActionPerformed(evt);
            }
        });

        tile_0_4.setBackground(new java.awt.Color(47, 173, 81));
        tile_0_4.setFont(new java.awt.Font("Arial", 0, 72)); // NOI18N
        tile_0_4.setBorder(null);
        tile_0_4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tile_0_4ActionPerformed(evt);
            }
        });

        tile_0_3.setBackground(new java.awt.Color(47, 173, 81));
        tile_0_3.setFont(new java.awt.Font("Arial", 0, 72)); // NOI18N
        tile_0_3.setBorder(null);
        tile_0_3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tile_0_3ActionPerformed(evt);
            }
        });

        tile_0_2.setBackground(new java.awt.Color(47, 173, 81));
        tile_0_2.setFont(new java.awt.Font("Arial", 0, 72)); // NOI18N
        tile_0_2.setBorder(null);
        tile_0_2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tile_0_2ActionPerformed(evt);
            }
        });

        tile_1_0.setBackground(new java.awt.Color(47, 173, 81));
        tile_1_0.setFont(new java.awt.Font("Arial", 0, 72)); // NOI18N
        tile_1_0.setBorder(null);
        tile_1_0.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tile_1_0ActionPerformed(evt);
            }
        });

        tile_1_1.setBackground(new java.awt.Color(47, 173, 81));
        tile_1_1.setFont(new java.awt.Font("Arial", 0, 72)); // NOI18N
        tile_1_1.setBorder(null);
        tile_1_1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tile_1_1ActionPerformed(evt);
            }
        });

        tile_1_2.setBackground(new java.awt.Color(47, 173, 81));
        tile_1_2.setFont(new java.awt.Font("Arial", 0, 72)); // NOI18N
        tile_1_2.setBorder(null);
        tile_1_2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tile_1_2ActionPerformed(evt);
            }
        });

        tile_1_3.setBackground(new java.awt.Color(47, 173, 81));
        tile_1_3.setFont(new java.awt.Font("Arial", 0, 72)); // NOI18N
        tile_1_3.setBorder(null);
        tile_1_3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tile_1_3ActionPerformed(evt);
            }
        });

        tile_1_4.setBackground(new java.awt.Color(47, 173, 81));
        tile_1_4.setFont(new java.awt.Font("Arial", 0, 72)); // NOI18N
        tile_1_4.setBorder(null);
        tile_1_4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tile_1_4ActionPerformed(evt);
            }
        });

        tile_1_5.setBackground(new java.awt.Color(47, 173, 81));
        tile_1_5.setFont(new java.awt.Font("Arial", 0, 72)); // NOI18N
        tile_1_5.setBorder(null);
        tile_1_5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tile_1_5ActionPerformed(evt);
            }
        });

        tile_1_6.setBackground(new java.awt.Color(47, 173, 81));
        tile_1_6.setFont(new java.awt.Font("Arial", 0, 72)); // NOI18N
        tile_1_6.setBorder(null);
        tile_1_6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tile_1_6ActionPerformed(evt);
            }
        });

        tile_1_7.setBackground(new java.awt.Color(47, 173, 81));
        tile_1_7.setFont(new java.awt.Font("Arial", 0, 72)); // NOI18N
        tile_1_7.setBorder(null);
        tile_1_7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tile_1_7ActionPerformed(evt);
            }
        });

        tile_2_7.setBackground(new java.awt.Color(47, 173, 81));
        tile_2_7.setFont(new java.awt.Font("Arial", 0, 72)); // NOI18N
        tile_2_7.setBorder(null);
        tile_2_7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tile_2_7ActionPerformed(evt);
            }
        });

        tile_2_6.setBackground(new java.awt.Color(47, 173, 81));
        tile_2_6.setFont(new java.awt.Font("Arial", 0, 72)); // NOI18N
        tile_2_6.setBorder(null);
        tile_2_6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tile_2_6ActionPerformed(evt);
            }
        });

        tile_2_5.setBackground(new java.awt.Color(47, 173, 81));
        tile_2_5.setFont(new java.awt.Font("Arial", 0, 72)); // NOI18N
        tile_2_5.setBorder(null);
        tile_2_5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tile_2_5ActionPerformed(evt);
            }
        });

        tile_2_4.setBackground(new java.awt.Color(47, 173, 81));
        tile_2_4.setFont(new java.awt.Font("Arial", 0, 72)); // NOI18N
        tile_2_4.setBorder(null);
        tile_2_4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tile_2_4ActionPerformed(evt);
            }
        });

        tile_2_3.setBackground(new java.awt.Color(47, 173, 81));
        tile_2_3.setFont(new java.awt.Font("Arial", 0, 72)); // NOI18N
        tile_2_3.setBorder(null);
        tile_2_3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tile_2_3ActionPerformed(evt);
            }
        });

        tile_2_2.setBackground(new java.awt.Color(47, 173, 81));
        tile_2_2.setFont(new java.awt.Font("Arial", 0, 72)); // NOI18N
        tile_2_2.setBorder(null);
        tile_2_2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tile_2_2ActionPerformed(evt);
            }
        });

        tile_2_1.setBackground(new java.awt.Color(47, 173, 81));
        tile_2_1.setFont(new java.awt.Font("Arial", 0, 72)); // NOI18N
        tile_2_1.setBorder(null);
        tile_2_1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tile_2_1ActionPerformed(evt);
            }
        });

        tile_2_0.setBackground(new java.awt.Color(47, 173, 81));
        tile_2_0.setFont(new java.awt.Font("Arial", 0, 72)); // NOI18N
        tile_2_0.setBorder(null);
        tile_2_0.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tile_2_0ActionPerformed(evt);
            }
        });

        tile_3_5.setBackground(new java.awt.Color(47, 173, 81));
        tile_3_5.setFont(new java.awt.Font("Arial", 0, 72)); // NOI18N
        tile_3_5.setBorder(null);
        tile_3_5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tile_3_5ActionPerformed(evt);
            }
        });

        tile_3_7.setBackground(new java.awt.Color(47, 173, 81));
        tile_3_7.setFont(new java.awt.Font("Arial", 0, 72)); // NOI18N
        tile_3_7.setBorder(null);
        tile_3_7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tile_3_7ActionPerformed(evt);
            }
        });

        tile_3_6.setBackground(new java.awt.Color(47, 173, 81));
        tile_3_6.setFont(new java.awt.Font("Arial", 0, 72)); // NOI18N
        tile_3_6.setBorder(null);
        tile_3_6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tile_3_6ActionPerformed(evt);
            }
        });

        tile_3_0.setBackground(new java.awt.Color(47, 173, 81));
        tile_3_0.setFont(new java.awt.Font("Arial", 0, 72)); // NOI18N
        tile_3_0.setBorder(null);
        tile_3_0.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tile_3_0ActionPerformed(evt);
            }
        });

        tile_3_2.setBackground(new java.awt.Color(47, 173, 81));
        tile_3_2.setFont(new java.awt.Font("Arial", 0, 72)); // NOI18N
        tile_3_2.setBorder(null);
        tile_3_2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tile_3_2ActionPerformed(evt);
            }
        });

        tile_3_4.setBackground(new java.awt.Color(47, 173, 81));
        tile_3_4.setFont(new java.awt.Font("Arial", 0, 72)); // NOI18N
        tile_3_4.setText("●");
        tile_3_4.setBorder(null);
        tile_3_4.setForeground(new java.awt.Color(0,0,0));
        tile_3_4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tile_3_4ActionPerformed(evt);
            }
        });

        tile_3_3.setBackground(new java.awt.Color(47, 173, 81));
        tile_3_3.setFont(new java.awt.Font("Arial", 0, 72)); // NOI18N
        tile_3_3.setText("●");
        tile_3_3.setForeground(new java.awt.Color(255, 255, 255));
        tile_3_3.setAlignmentY(0.0F);
        tile_3_3.setBorder(null);
        tile_3_3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tile_3_3ActionPerformed(evt);
            }
        });

        tile_3_1.setBackground(new java.awt.Color(47, 173, 81));
        tile_3_1.setFont(new java.awt.Font("Arial", 0, 72)); // NOI18N
        tile_3_1.setBorder(null);
        tile_3_1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tile_3_1ActionPerformed(evt);
            }
        });

        tile_4_0.setBackground(new java.awt.Color(47, 173, 81));
        tile_4_0.setFont(new java.awt.Font("Arial", 0, 72)); // NOI18N
        tile_4_0.setBorder(null);
        tile_4_0.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tile_4_0ActionPerformed(evt);
            }
        });

        tile_4_2.setBackground(new java.awt.Color(47, 173, 81));
        tile_4_2.setFont(new java.awt.Font("Arial", 0, 72)); // NOI18N
        tile_4_2.setBorder(null);
        tile_4_2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tile_4_2ActionPerformed(evt);
            }
        });

        tile_4_6.setBackground(new java.awt.Color(47, 173, 81));
        tile_4_6.setFont(new java.awt.Font("Arial", 0, 72)); // NOI18N
        tile_4_6.setBorder(null);
        tile_4_6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tile_4_6ActionPerformed(evt);
            }
        });

        tile_4_5.setBackground(new java.awt.Color(47, 173, 81));
        tile_4_5.setFont(new java.awt.Font("Arial", 0, 72)); // NOI18N
        tile_4_5.setBorder(null);
        tile_4_5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tile_4_5ActionPerformed(evt);
            }
        });

        tile_4_1.setBackground(new java.awt.Color(47, 173, 81));
        tile_4_1.setFont(new java.awt.Font("Arial", 0, 72)); // NOI18N
        tile_4_1.setBorder(null);
        tile_4_1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tile_4_1ActionPerformed(evt);
            }
        });

        tile_4_3.setBackground(new java.awt.Color(47, 173, 81));
        tile_4_3.setFont(new java.awt.Font("Arial", 0, 72)); // NOI18N
        tile_4_3.setText("●");
        tile_4_3.setBorder(null);
        tile_4_3.setForeground(new java.awt.Color(0,0,0));
        tile_4_3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tile_4_3ActionPerformed(evt);
            }
        });
        
        tile_4_7.setBackground(new java.awt.Color(47, 173, 81));
        tile_4_7.setFont(new java.awt.Font("Arial", 0, 72)); // NOI18N
        tile_4_7.setBorder(null);
        tile_4_7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tile_4_7ActionPerformed(evt);
            }
        });

        tile_4_4.setBackground(new java.awt.Color(47, 173, 81));
        tile_4_4.setFont(new java.awt.Font("Arial", 0, 72)); // NOI18N
        tile_4_4.setForeground(new java.awt.Color(255, 255, 255));
        tile_4_4.setText("●");
        tile_4_4.setBorder(null);
        tile_4_4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tile_4_4ActionPerformed(evt);
            }
        });
        
        tile_5_0.setBackground(new java.awt.Color(47, 173, 81));
        tile_5_0.setFont(new java.awt.Font("Arial", 0, 72)); // NOI18N
        tile_5_0.setBorder(null);
        tile_5_0.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tile_5_0ActionPerformed(evt);
            }
        });

        tile_5_6.setBackground(new java.awt.Color(47, 173, 81));
        tile_5_6.setFont(new java.awt.Font("Arial", 0, 72)); // NOI18N
        tile_5_6.setBorder(null);
        tile_5_6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tile_5_6ActionPerformed(evt);
            }
        });

        tile_5_3.setBackground(new java.awt.Color(47, 173, 81));
        tile_5_3.setFont(new java.awt.Font("Arial", 0, 72)); // NOI18N
        tile_5_3.setBorder(null);
        tile_5_3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tile_5_3ActionPerformed(evt);
            }
        });

        tile_5_7.setBackground(new java.awt.Color(47, 173, 81));
        tile_5_7.setFont(new java.awt.Font("Arial", 0, 72)); // NOI18N
        tile_5_7.setBorder(null);
        tile_5_7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tile_5_7ActionPerformed(evt);
            }
        });

        tile_5_4.setBackground(new java.awt.Color(47, 173, 81));
        tile_5_4.setFont(new java.awt.Font("Arial", 0, 72)); // NOI18N
        tile_5_4.setBorder(null);
        tile_5_4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tile_5_4ActionPerformed(evt);
            }
        });

        tile_5_1.setBackground(new java.awt.Color(47, 173, 81));
        tile_5_1.setFont(new java.awt.Font("Arial", 0, 72)); // NOI18N
        tile_5_1.setBorder(null);
        tile_5_1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tile_5_1ActionPerformed(evt);
            }
        });

        tile_5_2.setBackground(new java.awt.Color(47, 173, 81));
        tile_5_2.setFont(new java.awt.Font("Arial", 0, 72)); // NOI18N
        tile_5_2.setBorder(null);
        tile_5_2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tile_5_2ActionPerformed(evt);
            }
        });

        tile_5_5.setBackground(new java.awt.Color(47, 173, 81));
        tile_5_5.setFont(new java.awt.Font("Arial", 0, 72)); // NOI18N
        tile_5_5.setBorder(null);
        tile_5_5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tile_5_5ActionPerformed(evt);
            }
        });

        tile_6_1.setBackground(new java.awt.Color(47, 173, 81));
        tile_6_1.setFont(new java.awt.Font("Arial", 0, 72)); // NOI18N
        tile_6_1.setBorder(null);
        tile_6_1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tile_6_1ActionPerformed(evt);
            }
        });

        tile_6_6.setBackground(new java.awt.Color(47, 173, 81));
        tile_6_6.setFont(new java.awt.Font("Arial", 0, 72)); // NOI18N
        tile_6_6.setBorder(null);
        tile_6_6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tile_6_6ActionPerformed(evt);
            }
        });

        tile_6_0.setBackground(new java.awt.Color(47, 173, 81));
        tile_6_0.setFont(new java.awt.Font("Arial", 0, 72)); // NOI18N
        tile_6_0.setBorder(null);
        tile_6_0.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tile_6_0ActionPerformed(evt);
            }
        });

        tile_6_4.setBackground(new java.awt.Color(47, 173, 81));
        tile_6_4.setFont(new java.awt.Font("Arial", 0, 72)); // NOI18N
        tile_6_4.setBorder(null);
        tile_6_4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tile_6_4ActionPerformed(evt);
            }
        });

        tile_6_2.setBackground(new java.awt.Color(47, 173, 81));
        tile_6_2.setFont(new java.awt.Font("Arial", 0, 72)); // NOI18N
        tile_6_2.setBorder(null);
        tile_6_2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tile_6_2ActionPerformed(evt);
            }
        });

        tile_6_5.setBackground(new java.awt.Color(47, 173, 81));
        tile_6_5.setFont(new java.awt.Font("Arial", 0, 72)); // NOI18N
        tile_6_5.setBorder(null);
        tile_6_5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tile_6_5ActionPerformed(evt);
            }
        });

        tile_6_3.setBackground(new java.awt.Color(47, 173, 81));
        tile_6_3.setFont(new java.awt.Font("Arial", 0, 72)); // NOI18N
        tile_6_3.setBorder(null);
        tile_6_3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tile_6_3ActionPerformed(evt);
            }
        });

        tile_6_7.setBackground(new java.awt.Color(47, 173, 81));
        tile_6_7.setFont(new java.awt.Font("Arial", 0, 72)); // NOI18N
        tile_6_7.setBorder(null);
        tile_6_7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tile_6_7ActionPerformed(evt);
            }
        });

        tile_7_1.setBackground(new java.awt.Color(47, 173, 81));
        tile_7_1.setFont(new java.awt.Font("Arial", 0, 72)); // NOI18N
        tile_7_1.setBorder(null);
        tile_7_1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tile_7_1ActionPerformed(evt);
            }
        });

        tile_7_6.setBackground(new java.awt.Color(47, 173, 81));
        tile_7_6.setFont(new java.awt.Font("Arial", 0, 72)); // NOI18N
        tile_7_6.setBorder(null);
        tile_7_6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tile_7_6ActionPerformed(evt);
            }
        });

        tile_7_5.setBackground(new java.awt.Color(47, 173, 81));
        tile_7_5.setFont(new java.awt.Font("Arial", 0, 72)); // NOI18N
        tile_7_5.setBorder(null);
        tile_7_5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tile_7_5ActionPerformed(evt);
            }
        });

        tile_7_3.setBackground(new java.awt.Color(47, 173, 81));
        tile_7_3.setFont(new java.awt.Font("Arial", 0, 72)); // NOI18N
        tile_7_3.setBorder(null);
        tile_7_3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tile_7_3ActionPerformed(evt);
            }
        });

        tile_7_4.setBackground(new java.awt.Color(47, 173, 81));
        tile_7_4.setFont(new java.awt.Font("Arial", 0, 72)); // NOI18N
        tile_7_4.setBorder(null);
        tile_7_4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tile_7_4ActionPerformed(evt);
            }
        });

        tile_7_7.setBackground(new java.awt.Color(47, 173, 81));
        tile_7_7.setFont(new java.awt.Font("Arial", 0, 72)); // NOI18N
        tile_7_7.setBorder(null);
        tile_7_7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tile_7_7ActionPerformed(evt);
            }
        });

        tile_7_0.setBackground(new java.awt.Color(47, 173, 81));
        tile_7_0.setFont(new java.awt.Font("Arial", 0, 72)); // NOI18N
        tile_7_0.setBorder(null);
        tile_7_0.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tile_7_0ActionPerformed(evt);
            }
        });

        tile_7_2.setBackground(new java.awt.Color(47, 173, 81));
        tile_7_2.setFont(new java.awt.Font("Arial", 0, 72)); // NOI18N
        tile_7_2.setBorder(null);
        tile_7_2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tile_7_2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(scoreField1)
                    .addComponent(scoreField2))
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(score1Field, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(resetButton, javax.swing.GroupLayout.DEFAULT_SIZE, 67, Short.MAX_VALUE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(score2Field, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(exitButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(0, 18, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(tile_0_0, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tile_0_1, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tile_0_2, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tile_0_3, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tile_0_4, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tile_0_5, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tile_0_6, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tile_0_7, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(tile_1_0, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tile_1_1, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tile_1_2, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tile_1_3, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tile_1_4, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tile_1_5, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tile_1_6, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tile_1_7, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(tile_2_0, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tile_2_1, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tile_2_2, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tile_2_3, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tile_2_4, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tile_2_5, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tile_2_6, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tile_2_7, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(tile_3_0, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tile_3_1, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tile_3_2, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tile_3_3, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tile_3_4, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tile_3_5, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tile_3_6, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tile_3_7, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(tile_4_0, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tile_4_1, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tile_4_2, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tile_4_3, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tile_4_4, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tile_4_5, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tile_4_6, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tile_4_7, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(tile_5_0, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tile_5_1, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tile_5_2, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tile_5_3, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tile_5_4, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tile_5_5, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tile_5_6, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tile_5_7, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(tile_6_0, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tile_6_1, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tile_6_2, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tile_6_3, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tile_6_4, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tile_6_5, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tile_6_6, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tile_6_7, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(tile_7_0, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tile_7_1, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tile_7_2, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tile_7_3, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tile_7_4, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tile_7_5, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tile_7_6, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tile_7_7, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(scoreField1, javax.swing.GroupLayout.DEFAULT_SIZE, 50, Short.MAX_VALUE)
                    .addComponent(score1Field)
                    .addComponent(resetButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(tile_0_7, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tile_0_6, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tile_0_5, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tile_0_4, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tile_0_3, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tile_0_2, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tile_0_1, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tile_0_0, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(tile_1_7, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tile_1_6, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tile_1_5, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tile_1_4, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tile_1_3, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tile_1_2, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tile_1_1, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tile_1_0, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(tile_2_7, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tile_2_6, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tile_2_5, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tile_2_4, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tile_2_3, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tile_2_2, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tile_2_1, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tile_2_0, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(tile_3_7, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tile_3_6, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tile_3_5, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tile_3_4, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tile_3_3, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tile_3_2, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tile_3_1, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tile_3_0, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(tile_4_7, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tile_4_6, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tile_4_5, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tile_4_4, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tile_4_3, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tile_4_2, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tile_4_1, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tile_4_0, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(tile_5_7, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tile_5_6, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tile_5_5, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tile_5_4, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tile_5_3, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tile_5_2, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tile_5_1, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tile_5_0, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(tile_6_7, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tile_6_6, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tile_6_5, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tile_6_4, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tile_6_3, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tile_6_2, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tile_6_1, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tile_6_0, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(tile_7_7, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tile_7_6, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tile_7_5, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tile_7_4, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tile_7_3, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tile_7_2, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tile_7_1, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tile_7_0, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(scoreField2)
                    .addComponent(score2Field)
                    .addComponent(exitButton, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        scoreField1.getAccessibleContext().setAccessibleName("");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void resetButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_scoreField2ActionPerformed
        // TODO add your handling code here:
        //resetBoard();
        aiplay();
    }//GEN-LAST:event_scoreField2ActionPerformed

    private void exitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_scoreField1ActionPerformed
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_scoreField1ActionPerformed

    private void score1FieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_score1FieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_score1FieldActionPerformed

    private void score2FieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_score2FieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_score2FieldActionPerformed

    private void tile_0_0ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tile_0_0ActionPerformed
        // TODO add your handling code here:
        updateTile(tile_0_0,0,0);
        
    }//GEN-LAST:event_tile_0_0ActionPerformed
    private void tile_0_1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tile_0_1ActionPerformed
        // TODO add your handling code here:
        updateTile(tile_0_1,0,1);
        
    }//GEN-LAST:event_tile_0_1ActionPerformed
    private void tile_0_2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tile_0_2ActionPerformed
        // TODO add your handling code here:
        updateTile(tile_0_2,0,2);
        
    }//GEN-LAST:event_tile_0_2ActionPerformed
    private void tile_0_3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tile_0_3ActionPerformed
        // TODO add your handling code here:
        updateTile(tile_0_3,0,3);
        
    }//GEN-LAST:event_tile_0_3ActionPerformed
    private void tile_0_4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tile_0_4ActionPerformed
        // TODO add your handling code here:
        updateTile(tile_0_4,0,4);
        
    }//GEN-LAST:event_tile_0_4ActionPerformed
    private void tile_0_5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tile_0_5ActionPerformed
        // TODO add your handling code here:
        updateTile(tile_0_5,0,5);
        
    }//GEN-LAST:event_tile_0_5ActionPerformed
    private void tile_0_6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tile_0_6ActionPerformed
        // TODO add your handling code here:
        updateTile(tile_0_6,0,6);
        
    }//GEN-LAST:event_tile_0_6ActionPerformed
    private void tile_0_7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tile_0_7ActionPerformed
        // TODO add your handling code here:
        updateTile(tile_0_7,0,7);
        
    }//GEN-LAST:event_tile_0_7ActionPerformed
    
    private void tile_1_0ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tile_1_0ActionPerformed
        // TODO add your handling code here:
        updateTile(tile_1_0,1,0);
        
    }//GEN-LAST:event_tile_1_0ActionPerformed
    private void tile_1_1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tile_1_1ActionPerformed
        // TODO add your handling code here:
        updateTile(tile_1_1,1,1);
        
    }//GEN-LAST:event_tile_1_1ActionPerformed
    private void tile_1_2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tile_1_2ActionPerformed
        // TODO add your handling code here:
        updateTile(tile_1_2,1,2);
        
    }//GEN-LAST:event_tile_1_2ActionPerformed
    private void tile_1_3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tile_1_3ActionPerformed
        // TODO add your handling code here:
        updateTile(tile_1_3,1,3);
        
    }//GEN-LAST:event_tile_1_3ActionPerformed
    private void tile_1_4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tile_1_4ActionPerformed
        // TODO add your handling code here:
        updateTile(tile_1_4,1,4);
        
    }//GEN-LAST:event_tile_1_4ActionPerformed
    private void tile_1_5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tile_1_5ActionPerformed
        // TODO add your handling code here:
        updateTile(tile_1_5,1,5);
        
    }//GEN-LAST:event_tile_1_5ActionPerformed
    private void tile_1_6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tile_1_6ActionPerformed
        // TODO add your handling code here:
        updateTile(tile_1_6,1,6);
        
    }//GEN-LAST:event_tile_1_6ActionPerformed
    private void tile_1_7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tile_1_7ActionPerformed
        // TODO add your handling code here:
        updateTile(tile_1_7,1,7);
        
    }//GEN-LAST:event_tile_1_7ActionPerformed
    
    private void tile_2_0ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tile_2_0ActionPerformed
        // TODO add your handling code here:
        updateTile(tile_2_0,2,0);
        
    }//GEN-LAST:event_tile_2_0ActionPerformed
    private void tile_2_1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tile_2_1ActionPerformed
        // TODO add your handling code here:
        updateTile(tile_2_1,2,1);
        
    }//GEN-LAST:event_tile_2_1ActionPerformed
    private void tile_2_2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tile_2_2ActionPerformed
        // TODO add your handling code here:
        updateTile(tile_2_2,2,2);
        
    }//GEN-LAST:event_tile_2_2ActionPerformed
    private void tile_2_3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tile_2_3ActionPerformed
        // TODO add your handling code here:
        updateTile(tile_2_3,2,3);
        
    }//GEN-LAST:event_tile_2_3ActionPerformed
    private void tile_2_4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tile_2_4ActionPerformed
        // TODO add your handling code here:
        updateTile(tile_2_4,2,4);
        
    }//GEN-LAST:event_tile_2_4ActionPerformed
    private void tile_2_5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tile_2_5ActionPerformed
        // TODO add your handling code here:
        updateTile(tile_2_5,2,5);
        
    }//GEN-LAST:event_tile_2_5ActionPerformed
    private void tile_2_6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tile_2_6ActionPerformed
        // TODO add your handling code here:
        updateTile(tile_2_6,2,6);
        
    }//GEN-LAST:event_tile_2_6ActionPerformed
    private void tile_2_7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tile_2_7ActionPerformed
        // TODO add your handling code here:
        updateTile(tile_2_7,2,7);
        
    }//GEN-LAST:event_tile_2_7ActionPerformed

    private void tile_3_0ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tile_3_0ActionPerformed
        // TODO add your handling code here:
        updateTile(tile_3_0,3,0);
        
    }//GEN-LAST:event_tile_3_0ActionPerformed
    private void tile_3_1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tile_3_1ActionPerformed
        // TODO add your handling code here:
        updateTile(tile_3_1,3,1);
        
    }//GEN-LAST:event_tile_3_1ActionPerformed
    private void tile_3_2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tile_3_2ActionPerformed
        // TODO add your handling code here:
        updateTile(tile_3_2,3,2);
        
    }//GEN-LAST:event_tile_3_2ActionPerformed
    private void tile_3_3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tile_3_3ActionPerformed
        // TODO add your handling code here:
        updateTile(tile_3_3,3,3);
        
    }//GEN-LAST:event_tile_3_3ActionPerformed
    private void tile_3_4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tile_3_4ActionPerformed
        // TODO add your handling code here:
        updateTile(tile_3_4,3,4);
        
    }//GEN-LAST:event_tile_3_4ActionPerformed
    private void tile_3_5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tile_3_5ActionPerformed
        // TODO add your handling code here:
        updateTile(tile_3_5,3,5);
        
    }//GEN-LAST:event_tile_3_5ActionPerformed
    private void tile_3_6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tile_3_6ActionPerformed
        // TODO add your handling code here:
        updateTile(tile_3_6,3,6);
        
    }//GEN-LAST:event_tile_3_6ActionPerformed
    private void tile_3_7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tile_3_7ActionPerformed
        // TODO add your handling code here:
        updateTile(tile_3_7,3,7);
        
    }//GEN-LAST:event_tile_3_7ActionPerformed

    private void tile_4_0ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tile_4_0ActionPerformed
        // TODO add your handling code here:
        updateTile(tile_4_0,4,0);
        
    }//GEN-LAST:event_tile_4_0ActionPerformed
    private void tile_4_1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tile_4_1ActionPerformed
        // TODO add your handling code here:
        updateTile(tile_4_1,4,1);
        
    }//GEN-LAST:event_tile_4_1ActionPerformed
    private void tile_4_2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tile_4_2ActionPerformed
        // TODO add your handling code here:
        updateTile(tile_4_2,4,2);
        
    }//GEN-LAST:event_tile_4_2ActionPerformed
    private void tile_4_3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tile_4_3ActionPerformed
        // TODO add your handling code here:
        updateTile(tile_4_3,4,3);
        
    }//GEN-LAST:event_tile_4_3ActionPerformed
    private void tile_4_4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tile_4_4ActionPerformed
        // TODO add your handling code here:
        updateTile(tile_4_4,4,4);
        
    }//GEN-LAST:event_tile_4_4ActionPerformed
    private void tile_4_5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tile_4_5ActionPerformed
        // TODO add your handling code here:
        updateTile(tile_4_5,4,5);
        
    }//GEN-LAST:event_tile_4_5ActionPerformed
    private void tile_4_6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tile_4_6ActionPerformed
        // TODO add your handling code here:
        updateTile(tile_4_6,4,6);
        
    }//GEN-LAST:event_tile_4_6ActionPerformed
    private void tile_4_7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tile_4_7ActionPerformed
        // TODO add your handling code here:
        updateTile(tile_4_7,4,7);
        
    }//GEN-LAST:event_tile_4_7ActionPerformed
    
    private void tile_5_0ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tile_5_0ActionPerformed
        // TODO add your handling code here:
        updateTile(tile_5_0,5,0);
        
    }//GEN-LAST:event_tile_5_0ActionPerformed
    private void tile_5_1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tile_5_1ActionPerformed
        // TODO add your handling code here:
        updateTile(tile_5_1,5,1);
        
    }//GEN-LAST:event_tile_5_1ActionPerformed
    private void tile_5_2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tile_5_2ActionPerformed
        // TODO add your handling code here:
        updateTile(tile_5_2,5,2);
        
    }//GEN-LAST:event_tile_5_2ActionPerformed
    private void tile_5_3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tile_5_3ActionPerformed
        // TODO add your handling code here:
        updateTile(tile_5_3,5,3);
        
    }//GEN-LAST:event_tile_5_3ActionPerformed
    private void tile_5_4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tile_5_4ActionPerformed
        // TODO add your handling code here:
        updateTile(tile_5_4,5,4);
        
    }//GEN-LAST:event_tile_5_4ActionPerformed
    private void tile_5_5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tile_5_5ActionPerformed
        // TODO add your handling code here:
        updateTile(tile_5_5,5,5);
        
    }//GEN-LAST:event_tile_5_5ActionPerformed
    private void tile_5_6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tile_5_6ActionPerformed
        // TODO add your handling code here:
        updateTile(tile_5_6,5,6);
        
    }//GEN-LAST:event_tile_5_6ActionPerformed
    private void tile_5_7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tile_5_7ActionPerformed
        // TODO add your handling code here:
        updateTile(tile_5_7,5,7);
        
    }//GEN-LAST:event_tile_5_7ActionPerformed

    private void tile_6_0ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tile_6_0ActionPerformed
        // TODO add your handling code here:
        updateTile(tile_6_0,6,0);
        
    }//GEN-LAST:event_tile_6_0ActionPerformed
    private void tile_6_1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tile_6_1ActionPerformed
        // TODO add your handling code here:
        updateTile(tile_6_1,6,1);
        
    }//GEN-LAST:event_tile_6_1ActionPerformed
    private void tile_6_2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tile_6_2ActionPerformed
        // TODO add your handling code here:
        updateTile(tile_6_2,6,2);
        
    }//GEN-LAST:event_tile_6_2ActionPerformed
    private void tile_6_3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tile_6_3ActionPerformed
        // TODO add your handling code here:
        updateTile(tile_6_3,6,3);
        
    }//GEN-LAST:event_tile_6_3ActionPerformed
    private void tile_6_4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tile_6_4ActionPerformed
        // TODO add your handling code here:
        updateTile(tile_6_4,6,4);
        
    }//GEN-LAST:event_tile_6_4ActionPerformed
    private void tile_6_5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tile_6_5ActionPerformed
        // TODO add your handling code here:
        updateTile(tile_6_5,6,5);
        
    }//GEN-LAST:event_tile_6_5ActionPerformed
    private void tile_6_6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tile_6_6ActionPerformed
        // TODO add your handling code here:
        updateTile(tile_6_6,6,6);
        
    }//GEN-LAST:event_tile_6_6ActionPerformed
    private void tile_6_7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tile_6_7ActionPerformed
        // TODO add your handling code here:
        updateTile(tile_6_7,6,7);
        
    }//GEN-LAST:event_tile_6_7ActionPerformed

    private void tile_7_0ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tile_7_0ActionPerformed
        // TODO add your handling code here:
        updateTile(tile_7_0,7,0);
        
    }//GEN-LAST:event_tile_7_0ActionPerformed
    private void tile_7_1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tile_7_1ActionPerformed
        // TODO add your handling code here:
        updateTile(tile_7_1,7,1);
        
    }//GEN-LAST:event_tile_7_1ActionPerformed
    private void tile_7_2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tile_7_2ActionPerformed
        // TODO add your handling code here:
        updateTile(tile_7_2,7,2);
        
    }//GEN-LAST:event_tile_7_2ActionPerformed
    private void tile_7_3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tile_7_3ActionPerformed
        // TODO add your handling code here:
        updateTile(tile_7_3,7,3);
        
    }//GEN-LAST:event_tile_7_3ActionPerformed
    private void tile_7_4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tile_7_4ActionPerformed
        // TODO add your handling code here:
        updateTile(tile_7_4,7,4);
        
    }//GEN-LAST:event_tile_7_4ActionPerformed
    private void tile_7_5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tile_7_5ActionPerformed
        // TODO add your handling code here:
        updateTile(tile_7_5,7,5);
        
    }//GEN-LAST:event_tile_7_5ActionPerformed
    private void tile_7_6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tile_7_6ActionPerformed
        // TODO add your handling code here:
        updateTile(tile_7_6,7,6);
        
    }//GEN-LAST:event_tile_7_6ActionPerformed
    private void tile_7_7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tile_7_7ActionPerformed
        // TODO add your handling code here:
        updateTile(tile_7_7,7,7);
        
    }//GEN-LAST:event_tile_7_7ActionPerformed
    
    /**
     * @param args the command line arguments
     */
    
    //method for all action listeners - updates board and makes move
    public void updateTile(JButton tile, int x, int y) {
        arrayBoard = makeReverseBoard(arrayBoard);
        ArrayList<int[]> legalMoves = returnMoves(arrayBoard);
        int [] compareArray = new int[2];
        int xPos = 0; int yPos = 0;
        //checks if user's input is actually a legal move, otherwise, do nothing
        for (int i = 0; i < legalMoves.size(); i++) {
            compareArray = legalMoves.get(i);
            xPos = compareArray[0];
            yPos = compareArray[1];
            if ((x == xPos) && y == yPos) {
                arrayBoard[x][y] = 2;
                testBoard(arrayBoard);
                //flips captured pieces for player's move
                flipTiles(compareArray,2);
                testBoard(arrayBoard);
                //reverses board to account for previous reverse
                arrayBoard = makeReverseBoard(arrayBoard);
                testBoard(arrayBoard);

                //updates the JButton array to match that of the arrayBoard
                boardList = storeFromArrayBoard(arrayBoard);
                //resets legalmove indicator
                resetLegal(boardList);
                //updates the GUI based on new boardList
                updateBoard(boardList);
                updateScores();
                //swaps bold font to Computer, indicating AI turn
                scoreField1.setFont(new Font("Arial Black", Font.PLAIN, 24));
                scoreField2.setFont(new Font("Arial Black", Font.BOLD+Font.ITALIC, 24));

                //allow AI to move
                aiCanMove = true;
                
                //1 second delay to let user see their move
                int delay = 1000;
                Timer timer = new Timer(delay, new java.awt.event.ActionListener(){
                @Override
                public void actionPerformed(java.awt.event.ActionEvent e ){
                //AI move handler method
                    play();
                }
                });
                timer.setRepeats(false);
                timer.start();
                break;
            }
        }
    }
    //prints arrayboard
    public void testBoard(int[][] board) {
        System.out.println("==========");
        for (int i = 0; i < 8; i++) {
        for (int k = 0; k < 8; k++) {
        System.out.print(board[i][k]);
        }
        System.out.println();
        }
        System.out.println("==========");
    }
    
    public void play2() { //WHITE: smartTurn
        ArrayList<int[]> legalMoves = new ArrayList<>();
        int[][] reverseBoard = makeBoardCopy(arrayBoard);
        int [] compareArray = new int[2];
        var aiMoveChoice = new int[2];
        int x; int y;
        
        //AI chooses smart turn
        aiMoveChoice = smartTurn(reverseBoard,4,2); 
        //Ai chooses randomly
        //legalMoves = returnMoves(arrayBoard);
        //aiMoveChoice = randomChoice(legalMoves);
        //AI chooses a move: smartTurn with capture            
        //aiMoveChoice = smartTurnCapture(reverseBoard,4,2).get(0);
        x = aiMoveChoice[0];
        y = aiMoveChoice[1];
        if (x == 0 && y == 0) {
            arrayBoard[x][y] = 2;
        }
        if (x == 7 && y == 7) {
            arrayBoard[x][y] = 2;
        }
        
        if (!checkWin(arrayBoard)) {
            if (x != -1) {
                boardList[x][y].setForeground(Color.BLACK); //reverse, will actually play white
                boardList[x][y].setText("●");
                arrayBoard[x][y] = 2;
                
                //flips captured pieces for player's move
                flipTiles(aiMoveChoice,2);
                updateScores();  //updates score on GUI
                //updates the JButton array to match that of the arrayBoard
                boardList = storeFromArrayBoard(arrayBoard);
                //resets legalmove indicator
                resetLegal(boardList);
                //updates the GUI based on new boardList
                updateBoard(boardList);
                
                //swaps bold font to Computer, indicating AI turn
                scoreField1.setFont(new Font("Arial Black", Font.PLAIN, 24));
                scoreField2.setFont(new Font("Arial Black", Font.BOLD+Font.ITALIC, 24));

                //allow AI to move
                aiCanMove = true;


                aiplay();
            }
            else { //skip other turn
                play2();
            }
        }
        else {
            if (checkWin(arrayBoard)) {//game has been won
                trials++;
                //decide winner
                if (getWhiteScore(arrayBoard) > getBlackScore(arrayBoard)) {    // white wins
                    whiteWins++;
                    if (trials == totalTrials) {
                        printResults();
                    }
                    else {
                        exitButton.setText(trials + "");
                        resetBoard();
                        //aiplay();
                    }
                }
                else if (getWhiteScore(arrayBoard) < getBlackScore(arrayBoard)) {   //black wins
                    blackWins++;
                    if (trials == totalTrials) {
                        printResults();
                    }
                    else {
                        exitButton.setText(trials + "");
                        resetBoard();
                        //aiplay();
                    }
                }
                else { //draw
                    draws++;
                    if (trials == totalTrials) {
                        printResults();
                    }
                    else {
                        exitButton.setText(trials + "");
                        resetBoard();
                        //aiplay();
                    }
                }
                aiCanMove = true;
            }
        }
    }
    
    public void aiplay() { //BLACK: smartTurnCapture
        ArrayList<int[]> legalMoves = new ArrayList<>();
        
        int[][] reverseBoard = makeBoardCopy(arrayBoard);
        var aiMoveChoice = new int[2];
        int aiMoveX; int aiMoveY;

        if(!checkWin(arrayBoard) && aiCanMove) {
            //swaps player
            reverseBoard = makeReverseBoard(reverseBoard);

            //AI chooses a move: smartTurn
            //aiMoveChoice = smartTurn(reverseBoard,4,2);         
            //AI chooses a move: smartTurn with capture            
            aiMoveChoice = smartTurnCapture(reverseBoard,4,2).get(0);
            //AI chooses a move: random move
            //legalMoves = returnMoves(reverseBoard);
            //aiMoveChoice = randomChoice(legalMoves);
            
            aiMoveX = aiMoveChoice[0];
            aiMoveY = aiMoveChoice[1];
            
            if (aiMoveX != -1) { //AI has a legal move available 

                //updates move choice on arrayBoard
                reverseBoard[aiMoveX][aiMoveY] = 2;

                //testing only - places marker on ai-chosen move
                boardList[aiMoveX][aiMoveY].setBackground(Color.RED);

                //update GUI with AI move
                boardList[aiMoveX][aiMoveY].setForeground(Color.BLACK);

                //swaps board again to account for previous reverse
                arrayBoard = makeReverseBoard(reverseBoard);
                //update board with AI's captured picees
                flipTiles(aiMoveChoice,1);
                //updates the JButton array to match that of the arrayBoard
                boardList = storeFromArrayBoard(arrayBoard);
                //updates the GUI based on new boardList
                updateBoard(boardList);

                updateScores();

                //set up for next user turn
                //gets all legal moves for user
                legalMoves = returnMoves(arrayBoard);
                if (!legalMoves.isEmpty()) { //user has legal moves available 
                    //updates GUI to show legal moves
                    showLegal(legalMoves, boardList);
                    
                    //swaps bold font to Player, indicating User's turn
                    scoreField2.setFont(new Font("Arial Black", Font.PLAIN, 24));
                    scoreField1.setFont(new Font("Arial Black", Font.BOLD+Font.ITALIC, 24));
                    
                    aiCanMove = false;
                    play2();
                    
                }
                else { //skip user turn
                    aiplay();
                }
            }
            else { //no legal moves left for AI
                //swaps board again to account for previous reverse
                arrayBoard = makeReverseBoard(reverseBoard);
                //updates the GUI based on new boardList
                updateBoard(boardList);
                    
                //set up for next user turn
                //gets all legal moves for user
                legalMoves = returnMoves(arrayBoard);
                //updates GUI to show legal moves
                showLegal(legalMoves, boardList);
                //swaps bold font to Player, indicating User's turn
                scoreField2.setFont(new Font("Arial Black", Font.PLAIN, 24));
                scoreField1.setFont(new Font("Arial Black", Font.BOLD+Font.ITALIC, 24));
                aiCanMove = false;

                play2();
            }
        }
        else { 
            if (checkWin(arrayBoard)) {//game has been won
                trials++;
                //decide winner
                if (getWhiteScore(arrayBoard) > getBlackScore(arrayBoard)) {    // white wins
                    whiteWins++;
                    if (trials == totalTrials) {
                        printResults();
                    }
                    else {
                        exitButton.setText(trials + "");
                        resetBoard();
                        //aiplay();
                    }
                }
                else if (getWhiteScore(arrayBoard) < getBlackScore(arrayBoard)) {   //black wins
                    blackWins++;
                    if (trials == totalTrials) {
                        printResults();
                    }
                    else {
                        exitButton.setText(trials + "");
                        resetBoard();
                        //aiplay();
                    }
                }
                else { //draw
                    draws++;
                    if (trials == totalTrials) {
                        printResults();
                    }
                    else {
                        exitButton.setText(trials + "");
                        resetBoard();
                        //aiplay();
                    }
                }
                aiCanMove = true;
            }
        }
    }

    public void printResults() {
        System.out.println("TRIAL RESULTS");
        System.out.println("Number of white wins: " + whiteWins);
        System.out.println("Number of black wins: " + blackWins);
        System.out.println("Number of draws: " + draws);
        System.out.println("Total Trials: " + trials);
        System.out.println("=======================");
    }
    
    public void resetBoard() {
        //resets scores
        score1Field.setText("2");
        score2Field.setText("2");
        //resets board
        for (int i = 0; i < 8; i++) {
            for (int k = 0; k < 8; k++) {
                boardList[i][k].setText("");                            //resetting board pieces
                boardList[i][k].setBackground(new Color(47,173,81));    //resetting board colors
            }
        }
        //resets win text
        scoreField1.setText("Player (White)");
        scoreField2.setText("Player (Black)");
        //restores original pieces
        boardList[3][3].setText("●");
        boardList[3][3].setForeground(Color.WHITE);
        boardList[3][4].setText("●");
        boardList[3][4].setForeground(Color.BLACK);
        boardList[4][3].setText("●");
        boardList[4][3].setForeground(Color.BLACK);
        boardList[4][4].setText("●");
        boardList[4][4].setForeground(Color.WHITE);
        
        arrayBoard = storeToArrayBoard(boardList);
        updateBoard(boardList);
        
        //resets for player move
        ArrayList<int[]> legalMoves = new ArrayList<>();
        
        //first turn display
        //gets all legal moves for user
        legalMoves = returnMoves(arrayBoard);
        //updates GUI to show legal moves
        showLegal(legalMoves, boardList);
    }
   
    public static void main(String args[]) throws InterruptedException {
        //GUI Setup
        ReversiBoard guiBoard = new ReversiBoard();
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                guiBoard.setVisible(true);
            }
        });
        
        //initialize variables
        boardList = guiBoard.storeBoard();
        //transfers buttons into array in ReversiBoard class
        arrayBoard = guiBoard.storeToArrayBoard(boardList);
        
        //updates GUI portion using array
        guiBoard.updateBoard(boardList);
        
        
        ArrayList<int[]> legalMoves = new ArrayList<>();
        
        //first turn display
        int[][] reverseBoard = guiBoard.makeReverseBoard(arrayBoard);
        //gets all legal moves for user
        legalMoves = guiBoard.returnMoves(reverseBoard);
        //updates GUI to show legal moves
        guiBoard.showLegal(legalMoves, boardList);
        
        //ai vs. ai
        
        //testing
        /*for (int i = 0; i < totalTrials; i++) {
        guiBoard.aiplay();
        }
        guiBoard.whiteWins = 0;
        guiBoard.blackWins = 0;
        guiBoard.draws = 0;
        guiBoard.resetBoard();
        guiBoard.trials = 0;
        for (int i = 0; i < totalTrials; i++) {
        guiBoard.aiplay();
        }
        guiBoard.whiteWins = 0;
        guiBoard.blackWins = 0;
        guiBoard.draws = 0;
        guiBoard.resetBoard();
        guiBoard.trials = 0;
        for (int i = 0; i < totalTrials; i++) {
        guiBoard.aiplay();
        }
        guiBoard.whiteWins = 0;
        guiBoard.blackWins = 0;
        guiBoard.draws = 0;
        guiBoard.resetBoard();
        guiBoard.trials = 0;
        for (int i = 0; i < totalTrials; i++) {
        guiBoard.aiplay();
        }
        guiBoard.whiteWins = 0;
        guiBoard.blackWins = 0;
        guiBoard.draws = 0;
        guiBoard.resetBoard();
        guiBoard.trials = 0;
        for (int i = 0; i < totalTrials; i++) {
        guiBoard.aiplay();
        }*/
    }
    
    public void play() {
        ArrayList<int[]> legalMoves = new ArrayList<>();
        int[][] reverseBoard = makeBoardCopy(arrayBoard);
        var aiMoveChoice = new int[2];
        int aiMoveX; int aiMoveY;
        
        if(!checkWin(arrayBoard) && aiCanMove) {
            //swaps player
            //reverseBoard = makeReverseBoard(reverseBoard);

            //AI chooses a move: smartTurn
            //aiMoveChoice = smartTurn(reverseBoard,0,1);         
            //AI chooses a move: smartTurn with capture
            aiMoveChoice = smartTurnCapture(reverseBoard,0,2).get(0);
            
            aiMoveX = aiMoveChoice[0];
            aiMoveY = aiMoveChoice[1];
            if (aiMoveX != -1) { //AI has a legal move available 
                testBoard(arrayBoard);
                //updates move choice on arrayBoard
                arrayBoard[aiMoveX][aiMoveY] = 2;
                testBoard(arrayBoard);
                //testing only - places marker on ai-chosen move
                boardList[aiMoveX][aiMoveY].setBackground(Color.RED);
                
                //update GUI with AI move
                boardList[aiMoveX][aiMoveY].setForeground(Color.WHITE);
                
                //swaps board again to account for previous reverse
                //arrayBoard = makeReverseBoard(reverseBoard);
                //update board with AI's captured picees
                flipTiles(aiMoveChoice,2);
                //updates the JButton array to match that of the arrayBoard
                boardList = storeFromArrayBoard(arrayBoard);
                //updates the GUI based on new boardList
                updateBoard(boardList);
                
                updateScores();

                //set up for next user turn
                //gets all legal moves for user
                reverseBoard = makeReverseBoard(arrayBoard);
                legalMoves = returnMoves(reverseBoard);
                if (!legalMoves.isEmpty()) { //user has legal moves available 
                    //updates GUI to show legal moves
                    showLegal(legalMoves, boardList);
                    
                    //swaps bold font to Player, indicating User's turn
                    scoreField2.setFont(new Font("Arial Black", Font.PLAIN, 24));
                    scoreField1.setFont(new Font("Arial Black", Font.BOLD+Font.ITALIC, 24));
                    aiCanMove = false;
                }
                else { //skip user turn
                    play();
                }
            }
            else { //no legal moves left for AI
                //swaps board again to account for previous reverse
                //arrayBoard = makeReverseBoard(reverseBoard);
                //updates the GUI based on new boardList
                updateBoard(boardList);
                    
                //set up for next user turn
                //gets all legal moves for user
                reverseBoard = makeReverseBoard(arrayBoard);
                legalMoves = returnMoves(reverseBoard);
                //updates GUI to show legal moves
                showLegal(legalMoves, boardList);
                //swaps bold font to Player, indicating User's turn
                scoreField2.setFont(new Font("Arial Black", Font.PLAIN, 24));
                scoreField1.setFont(new Font("Arial Black", Font.BOLD+Font.ITALIC, 24));
                aiCanMove = false;
            }
        }
        else { 
            if (checkWin(arrayBoard)) {//game has been won
                //decide winner
                if (getWhiteScore(arrayBoard) > getBlackScore(arrayBoard)) {    // white wins
                    scoreField1.setText("White wins!");
                }
                else if (getWhiteScore(arrayBoard) < getBlackScore(arrayBoard)) {   //black wins
                    scoreField2.setText("Black wins!");
                }
                else { //draw
                    scoreField1.setText("Draw!");
                    scoreField2.setText("Draw!");
                }
            }
        }
    }
            
    //GUI functions
    //takes index values and updates them onto board, update GUI
    public void updateBoard(JButton[][] board) {
        tile_0_0 = board[0][0];
        tile_0_1 = board[0][1];
        tile_0_2 = board[0][2];
        tile_0_3 = board[0][3];
        tile_0_4 = board[0][4];
        tile_0_5 = board[0][5];
        tile_0_6 = board[0][6];
        tile_0_7 = board[0][7];
        //1st row
        tile_1_0 = board[1][0];
        tile_1_1 = board[1][1];
        tile_1_2 = board[1][2];
        tile_1_3 = board[1][3];
        tile_1_4 = board[1][4];
        tile_1_5 = board[1][5];
        tile_1_6 = board[1][6];
        tile_1_7 = board[1][7];
        //2nd row
        tile_2_0 = board[2][0];
        tile_2_1 = board[2][1];
        tile_2_2 = board[2][2];
        tile_2_3 = board[2][3];
        tile_2_4 = board[2][4];
        tile_2_5 = board[2][5];
        tile_2_6 = board[2][6];
        tile_2_7 = board[2][7];
        //3rd row
        tile_3_0 = board[3][0];
        tile_3_1 = board[3][1];
        tile_3_2 = board[3][2];
        tile_3_3 = board[3][3];
        tile_3_4 = board[3][4];
        tile_3_5 = board[3][5];
        tile_3_6 = board[3][6];
        tile_3_7 = board[3][7];
        //4th row
        tile_4_0 = board[4][0];
        tile_4_1 = board[4][1];
        tile_4_2 = board[4][2];
        tile_4_3 = board[4][3];
        tile_4_4 = board[4][4];
        tile_4_5 = board[4][5];
        tile_4_6 = board[4][6];
        tile_4_7 = board[4][7];
        //5th row
        tile_5_0 = board[5][0];
        tile_5_1 = board[5][1];
        tile_5_2 = board[5][2];
        tile_5_3 = board[5][3];
        tile_5_4 = board[5][4];
        tile_5_5 = board[5][5];
        tile_5_6 = board[5][6];
        tile_5_7 = board[5][7];
        //6th row
        tile_6_0 = board[6][0];
        tile_6_1 = board[6][1];
        tile_6_2 = board[6][2];
        tile_6_3 = board[6][3];
        tile_6_4 = board[6][4];
        tile_6_5 = board[6][5];
        tile_6_6 = board[6][6];
        tile_6_7 = board[6][7];
        //7th row
        tile_7_0 = board[7][0];
        tile_7_1 = board[7][1];
        tile_7_2 = board[7][2];
        tile_7_3 = board[7][3];
        tile_7_4 = board[7][4];
        tile_7_5 = board[7][5];
        tile_7_6 = board[7][6];
        tile_7_7 = board[7][7];
        revalidate();
        repaint();
    }
    
    //swap between black and white pieces, used for makeMove/updateBoard
    public void swapPlayer(ArrayList<int[]> moves, JButton[][] board) {
        JButton[][] newBoard = board; //needed to update board
        int[] compareArray = new int[2]; //gets the coordinate array stored in moves eg. [2,2] matches with tile_2_2
        int xPos = 0; //first coordinate stored in compareArray
        int yPos = 0; //second coordinate stored in compareArray
        for (int i = 0; i < moves.size(); i++) {
            compareArray = moves.get(i);
            xPos = compareArray[0];
            yPos = compareArray[1];
            newBoard[xPos][yPos].setBackground(new Color(0,153,153));
            newBoard[xPos][yPos].setEnabled(true); //reenables moves
        }
    }
    
    public void showLegal(ArrayList<int[]> moves, JButton[][] board) {
        JButton[][] newBoard = board; //needed to update board
        int[] compareArray = new int[2]; //gets the coordinate array stored in moves eg. [2,2] matches with tile_2_2
        int xPos = 0; //first coordinate stored in compareArray
        int yPos = 0; //second coordinate stored in compareArray
        //disableMoves(newBoard); //disables every button on the board
        //resetLegal(newBoard);
        for (int i = 0; i < moves.size(); i++) {
            compareArray = moves.get(i);
            xPos = compareArray[0];
            yPos = compareArray[1];
            newBoard[xPos][yPos].setBackground(new Color(0,153,153));
            newBoard[xPos][yPos].setEnabled(true); //reenables moves
        }
        updateBoard(newBoard);
    }
    
    
    public void resetLegal (JButton[][] board) { //makes all buttons green again
        JButton[][] newBoard = board;
        for (int i = 0; i < 8; i++) {
            for (int k = 0; k < 8; k++) {
                newBoard[i][k].setBackground(new Color(47,173,81));
            }
        }
        updateBoard(newBoard);
    }
    /* extraneous methods
    public void enableMoves(JButton[][] board) { //enables all buttons on board, used as a soft reset between moves
        JButton[][] newBoard = board; //needed to update board
        for (int i = 0; i < 8; i++) {
            for (int k = 0; k < 8; k++) {
                    newBoard[i][k].setEnabled(true);
            }
        }
        updateBoard(newBoard);
    }

    public void disableMoves(JButton[][] board) { //disables all buttons on board, used in tandem with showLegal, which will reenable only legal moves
        JButton[][] newBoard = board; //needed to update board
        int[][] arrayBoard = storeToArrayBoard(newBoard);
        for (int i = 0; i < 8; i++) {
            for (int k = 0; k < 8; k++) {
                if (arrayBoard[i][k] == 0) //value for empty tiles
                    newBoard[i][k].setEnabled(false); //disables buttons
            }
        }
        updateBoard(newBoard);
    }
    */
    
    public void updateScores() {
        score1Field.setText("" + getWhiteScore(arrayBoard));
        score2Field.setText("" + getBlackScore(arrayBoard));
    }

    //logic functions
    
    public JButton[][] storeBoard() { //stores the board in 
        JButton[][] board = new JButton[8][8];
        //0th row
        board[0][0] = tile_0_0;
        board[0][1] = tile_0_1;
        board[0][2] = tile_0_2;
        board[0][3] = tile_0_3;
        board[0][4] = tile_0_4;
        board[0][5] = tile_0_5;
        board[0][6] = tile_0_6;
        board[0][7] = tile_0_7;
        //1st row
        board[1][0] = tile_1_0;
        board[1][1] = tile_1_1;
        board[1][2] = tile_1_2;
        board[1][3] = tile_1_3;
        board[1][4] = tile_1_4;
        board[1][5] = tile_1_5;
        board[1][6] = tile_1_6;
        board[1][7] = tile_1_7;
        //2nd row
        board[2][0] = tile_2_0;
        board[2][1] = tile_2_1;
        board[2][2] = tile_2_2;
        board[2][3] = tile_2_3;
        board[2][4] = tile_2_4;
        board[2][5] = tile_2_5;
        board[2][6] = tile_2_6;
        board[2][7] = tile_2_7;
        //3rd row
        board[3][0] = tile_3_0;
        board[3][1] = tile_3_1;
        board[3][2] = tile_3_2;
        board[3][3] = tile_3_3;
        board[3][4] = tile_3_4;
        board[3][5] = tile_3_5;
        board[3][6] = tile_3_6;
        board[3][7] = tile_3_7;
        //4th row
        board[4][0] = tile_4_0;
        board[4][1] = tile_4_1;
        board[4][2] = tile_4_2;
        board[4][3] = tile_4_3;
        board[4][4] = tile_4_4;
        board[4][5] = tile_4_5;
        board[4][6] = tile_4_6;
        board[4][7] = tile_4_7;
        //5th row
        board[5][0] = tile_5_0;
        board[5][1] = tile_5_1;
        board[5][2] = tile_5_2;
        board[5][3] = tile_5_3;
        board[5][4] = tile_5_4;
        board[5][5] = tile_5_5;
        board[5][6] = tile_5_6;
        board[5][7] = tile_5_7;
        //6th row
        board[6][0] = tile_6_0;
        board[6][1] = tile_6_1;
        board[6][2] = tile_6_2;
        board[6][3] = tile_6_3;
        board[6][4] = tile_6_4;
        board[6][5] = tile_6_5;
        board[6][6] = tile_6_6;
        board[6][7] = tile_6_7;
        //7th row
        board[7][0] = tile_7_0;
        board[7][1] = tile_7_1;
        board[7][2] = tile_7_2;
        board[7][3] = tile_7_3;
        board[7][4] = tile_7_4;
        board[7][5] = tile_7_5;
        board[7][6] = tile_7_6;
        board[7][7] = tile_7_7;
        return board;
    }  
    
    public int[][] storeToArrayBoard(JButton[][] board) {
        int[][] arrayBoard = new int[8][8];
        for (int i = 0; i < 8; i++) {
            for (int k = 0; k < 8; k++) {
                if (board[i][k].getText().isEmpty()) { //value for EMPTY tile
                    arrayBoard[i][k] = 0;
                }
                else if (board[i][k].getForeground().getRGB() == Color.BLACK.getRGB()) { //RGB value for BLACK pieces
                    arrayBoard[i][k] = 1;
                }
                else { //WHITE pieces
                    arrayBoard[i][k] = 2;
                }
            }
        }
        return arrayBoard;
    }
    
    public JButton[][] storeFromArrayBoard(int[][] board) {
        JButton[][] buttonBoard = boardList;
        for (int i = 0; i < 8; i++) {
            for (int k = 0; k < 8; k++) {
                if (board[i][k] == 0) { //value for EMPTY tiles
                    
                }
                else if (board[i][k] == 1) { //value for BLACK pieces
                    buttonBoard[i][k].setText("●");
                    buttonBoard[i][k].setForeground(Color.BLACK);
                }
                else { //WHITE pieces
                    buttonBoard[i][k].setText("●");
                    buttonBoard[i][k].setForeground(Color.WHITE);
                }
            }
        }
        return buttonBoard;
    }
    
    public boolean checkWin(int[][] board) { 
    	if (returnMoves(board).isEmpty()) {
            int[][] newBoard = makeReverseBoard(board);
            if (returnMoves(newBoard).isEmpty()) {
    		return true;
            }
    	}
    	return false;
    }
    
    //Ellen implementations
    
    public boolean CanFlipTile(int wx, int wy, int bx, int by, int[][] hi) {
    	int sum = bx+by-wx-wy;
	//basically draws lines to figure out whether if someone is placing it, the new tile can flip the original tile 
	//0 = empty, 1= black, 2=white

	//this perspective is that I'm the white tile, looking to flip a black tile
		if (sum==-2) { 
	        while (bx<7 && by<7) {
	            bx++;
	            by++;
			if (hi[bx][by]==0) {return false;} //empty; therefore I cannot flip the tile
	                // if (b.getColor(flipx,flipy,b)){return false;}
			else if (hi[bx][by]==2) {return true;}
			}
		}

		else if (sum==2) {
	            while (0<bx && 0<by) {
	                bx--;
	                by--;
	                if (hi[bx][by]==0)  { return false;} //if tile is empty, then there's no way to flip so just return false
	                else if (hi[bx][by]==2) {return true;} //
	            }
		}

	else if (sum==-1) {
            if (bx==wx) {
                while (0<by) {
                    by--;
                    if (hi[bx][by]==0)  { return false;}
                    else if (hi[bx][by]==2)  { return true;}
		}
            }
            else {
		while (0<bx) {
                    bx--;
                    if (hi[bx][by]==0)  { return false;}
                    else if (hi[bx][by]==2)  { return true;}
		}
            }
	}
	else if (sum==1) {
            if (bx==wx) {
		while (by<7) {
                    by++;
                    if (hi[bx][by]==0)  { return false;}
                    else if (hi[bx][by]==2)  { return true;}
		}
            }
            else {
		while (bx<7) {
                    bx++;
                    if (hi[bx][by]==0)  { return false;}
                    else if (hi[bx][by]==2)  { return true;}
		}
            }
	}
	else {//sum=0
            if (bx>wx) {
		while (bx<7 && 0<by) {
                    bx++;
                    by--;
                    if (hi[bx][by]==0)  { return false;}
                    else if (hi[bx][by]==2)  { return true;}
		}
            }
            else { 
		while (by<7 && 0<bx ) {
                    bx--;
                    by++;
                    if (hi[bx][by]==0)  { return false;}
                    else if (hi[bx][by]==2)  { return true;}
		}
            }
	}
		return false;
    }
	
    public ArrayList<int[]> returnMoves(int[][] board) {//ARRAY OF ARRAYS
        //return possible moves for player2 (who is playing with 2 (i.e. white))
        //rules: empty, adjacent and must flip when placed
        

        ArrayList<int[]> available = new ArrayList<int[]>();
        //so it should return something like {{1,2}, {2,2}, {3,4}} so each element is an array that represents a single tile. 
        //In total, it represents all possible tiles during a move
        int[][] COPY = new int[8][8];
        int index = 0;

        for (int i=0; i<8; i++) {
            for (int j=0; j<8; j++) {
                COPY[i][j] = board[i][j];
            }
        }

        for (int i=0; i<8; i++) {
            for (int j=0; j<8; j++) {
                    if (COPY[i][j]==1) {//if opponent had placed a piece on this cell

                        //find adjacent empty squares
                        int r= i-1; //super long code
                        int c= j-1; //basically if it's one of the four adjacent squares

                        for (int row = r; row<r+3; row++) {
                            for (int col = c; col<c+3; col++) {
                                if (0<= row && row<8 && 0<= col && col<8 && !(row==i && col==j)) {
                                    if (COPY[row][col]==0 &&  CanFlipTile(row,col,i,j,board)) {//if there exists an empty adjacent tile
                                        int[] Point = new int[2];
                                        Point[0]=row;
                                        Point[1]=col;
                                        available.add(index, Point);
                                        index++;
                                    }
                                }
                            }
                        }
                    }
                }
            }
        //clean moves for redundancy
        int i = 0;
        int[] tempMove = new int[2];
        int x; int y;
        while (i < available.size()) {
        tempMove = available.get(i);
        x = tempMove[0];
        y = tempMove[1];
        if (arrayBoard[x][y] != 0) {
        available.remove(i);
        }
        else {
        i++;
        }
        }
        return available;
    }
   
   
    //pointValue for a specific move. Testable
    public int pointValue(int[] move) { //returns best move for a given board of ints. For example,it might return 
		//point values for each region
    	//CHANGEABLE, MAYBE TEST IT OUT
		final int R5= 10; 
		final int R3= 5;
		final int R1= 0; 
		final int R2= -5;
		final int R4=-10;

		//initializing variables
		int pointvalue;

		//main code
		int x= move[0];
		int y= move[1];
		if ((x==0 && y==0) || (x==0 && y==7) || (x==7 && y==0) || (x==7 && y==7)) {
			pointvalue = R5;
		}			
		else if (((x==2 || x==3 || x==4 || x==5)&& (y==0 | y==7)) || ((y==2 || y==3 || y==4 || y==5)&& (x==0 | x==7))) {
			pointvalue = R3;
		}
		else if ((2<=x && x<=5) && (2<=y && y<=5)) {
			pointvalue = R1;			
		}
		else if (((x==2 || x==3 || x==4 || x==5)&& (y==1 | y==6)) || ((y==2 || y==3 || y==4 || y==5)&& (x==1 | x==6))) {
			pointvalue = R2;
		}
		else {
			pointvalue = R4;
		}

		return pointvalue;
    }
    
    public void makeMove(int[][] board, int player, int[] move) {
    	board[move[0]][move[1]]=player;
    }
    
    public int lookAhead(int [][] board, int level, int[] move) {//always minimizing the white player
        // returns the minimum value for any possible move
        if (level==0) { 
            return pointValue(move);
        }

        else {
            ArrayList<int[]> movelist = returnMoves(board);
            int bestval = -998;
            for (int[] myMove : movelist) {
                int[][] COPY = makeBoardCopy(board);
                COPY = makeReverseBoard(COPY);
                testBoard(COPY);
                makeMove(COPY, 2, myMove);
                testBoard(COPY);
                if (checkWin(COPY)==true) {
                    return -1000;
                }
                int val = lookAhead(COPY,level-1,myMove);
                if (val > bestval) {
                    bestval = val; //max
                }
                
            }
            return -bestval; //then this is the minimum
        }
    }

    public int[] smartTurn(int[][] board, int level, int token) {
        //level  = how much to look ahead??
        //token  = player 1, or player 2
        //returns best legal move for player 2 (white)

        ArrayList<int[]> moveList = returnMoves(board);
        ArrayList<int[]> allMoves = new ArrayList<>();
        int bestval = -1001;
        int[] bestmove = new int[2];
        
        if (moveList.isEmpty()) {
            bestmove[0] = -1;
            bestmove[1] = -1;
            return bestmove;
        }
        else {
            for (int[] myMove : moveList) {
                int[][] COPY = makeBoardCopy(board);
                if (token==1) {
                    makeReverseBoard(COPY);
                }
                makeMove(COPY, 2 , myMove); 
                if (checkWin(COPY)==true) {
                    return myMove;
                }
                int val = lookAhead(COPY,level,myMove);
                if (val > bestval) {//maximize
                    allMoves.clear();
                    bestval = val;
                    bestmove = myMove;
                    allMoves.add(bestmove);
                }
                else if (val == bestval) {
                    allMoves.add(myMove);
                }
            }
            if (allMoves.size() != 1) { //randomize the choice, if there's more than one
                    int randomNum = ThreadLocalRandom.current().nextInt(0, allMoves.size()); //generate random number to choose between moves
                    bestmove = allMoves.get(randomNum);
                }
            
            return bestmove;
        }
    }
    
    public ArrayList<int[]> smartTurnCapture(int[][] board, int level, int token) {

        
        ArrayList<int[]> moveList = returnMoves(board);
        ArrayList<int[]> bestMoves = new ArrayList<>();
        
        
        int bestval = -1001;
        int[] bestmove = new int[2];
        
        if (moveList.isEmpty()) { //no legal moves
            bestmove[0] = -1;
            bestmove[1] = -1;
            bestMoves.add(bestmove);
            return bestMoves;
        }
        else {
            for (int[] myMove : moveList) {
                int[][] COPY = makeBoardCopy(board);
                if (token==1) {
                    makeReverseBoard(COPY);
                }
                makeMove(COPY, 2 , myMove); 
                if (checkWin(COPY)==true) {
                    bestMoves.add(myMove);
                    return bestMoves;
                }
                int val = lookAhead(COPY,level,myMove);
                if (val > bestval) {//maximize
                    bestMoves.clear();   //clear movelist, since there is a better move
                    bestval = val;
                    bestmove = myMove;
                    bestMoves.add(bestmove);
                }
                //my code
                else if (val == bestval) {
                    bestMoves.add(myMove);
                }
                //end of my code
            }
            //compare bestMoves for number of captured pieces
            if (bestMoves.size() == 1) {
                return bestMoves;
            }
            else {
                int mostFlips = 0;
                ArrayList<int[]> mostCaptureMove = new ArrayList<>();
                for (int[] move : bestMoves) {
                    int temp = getFlips(move,2);
                    if (getFlips(move,1) > mostFlips) {
                        mostCaptureMove.clear();
                        mostCaptureMove.add(move);
                    }
                    else if (getFlips(move,1) == mostFlips) {
                        mostCaptureMove.add(move);
                    }
                }
                if (mostCaptureMove.size() != 1) { //randomize the choice, if there's more than one
                    int randomNum = ThreadLocalRandom.current().nextInt(0, mostCaptureMove.size()); //generate random number to choose between moves
                    int[] chosenMove = mostCaptureMove.get(randomNum);
                    mostCaptureMove.clear();
                    mostCaptureMove.add(chosenMove);
                }
                arrayBoard = board;
                return mostCaptureMove;
            }
        }
    }
    

    //Aidan implementations
    
    public int[][] makeBoardCopy(int[][] oldBoard){ //creats a duplicate board with a seperate memory address but the same data
        int[][] boardCopy = new int[8][8]; 
        for (int i = 0; i < 8; i++){ 
            for (int c = 0; c < 8; c++){ 
                boardCopy[i][c] = oldBoard[i][c]; //gives boardCopy[i][c] the value of oldBoard[i][c]
            }
        }
      return boardCopy; //returns the identical board that has different memory address
    }

    public int[][] makeReverseBoard(int[][] oldBoard){ //reverses all of the colors on the board (black --> white && white --> black)
        int[][] boardReverse = makeBoardCopy(oldBoard); //if not in the same class, make sure to modify the static method call
        for (int i = 0; i < 8; i++) { 
            for (int k = 0; k < 8; k++) { 
                if (boardReverse[i][k] == 1){ //black --> white
                    boardReverse[i][k] = 2;
                }
                else if (boardReverse[i][k] == 2){ // white --> black
                    boardReverse[i][k] = 1;
                    }
                }
        }
        return boardReverse; //returns a new board with all of the colors flipped
    }

    public int getWhiteScore(int[][] board){ //get total white pieces
        int score = 0;
        for (int[] row : board){
            for (int element : row){
                if (element == 2){ //if white, add one to score
                    score++;
                }
            }
        }
        return score;
    }

    public int getBlackScore(int[][] board){ //get total black pieces
        int score = 0;
        for (int [] row : board){
            for (int element : row){
            if (element == 1) { //if black, add one ot score
                score++;
                }
            }
        }
        return score;
    }
    
    //Switch the color of one tile

    public static void flipPosition(int[][] board, int x, int y){
        if (board[x][y] == 1){
            arrayBoard[x][y] = 2;
        }
        else if(board[x][y] == 2){
            arrayBoard[x][y] = 1;
        }
    } 
      
    //Random AI
    
    public int[] randomChoice(ArrayList<int[]> possiblePoints){
        if (!possiblePoints.isEmpty()) {
            int n = (int)(Math.random() * possiblePoints.size());
            return possiblePoints.get(n);
        }
        else {
            int[] noMoves = {-1,-1};
            return noMoves;
        }
    }
    
    public int flipTiles(int[] points, int color){ //input board, coordinate, and color of piece
        arrayBoard[points[0]][points[1]] = color; //adds the new piece to the board
        int totalFlip = 0; 
        if (points[1] < 7){ //evaluate to the right
            for(int i = points[1] + 1; i < 8; i++){
                if (arrayBoard[points[0]][i] == color){
                    for(int c = points[1] + 1; c < i; c++){
                        flipPosition(arrayBoard, points[0], c);
                        totalFlip++;
                    }
                    break;
                }
                if (arrayBoard[points[0]][i] == 0){
                    break;
                }
            }
        }
        if (points[1] > 0){ //evaluate to the left
            for (int i = points[1] - 1; i >= 0; i--){
                if (arrayBoard[points[0]][i] == color){
                    for (int c = points[1] - 1; c > i; c--){
                        flipPosition(arrayBoard, points[0], c);
                        totalFlip++;
                    }
                    break;
                }
                if (arrayBoard[points[0]][i] == 0){
                    break;
                }
            }
        }
        if (points[0] < 7){ //evaluate beneath
            for (int i = points[0] + 1; i < 8; i++){
                if (arrayBoard[i][points[1]] == color){
                    for (int c = points[0] + 1; c < i; c++){
                        flipPosition(arrayBoard, c, points[1]);
                        totalFlip++;
                    }
                    break;
                }
                if (arrayBoard[i][points[1]] == 0){
                    break;
                }
            }
        }
        if (points[0] > 0){ //evaluate above
            for (int i = points[0] - 1; i >= 0; i--){
                if(arrayBoard[i][points[1]] == color){
                    for (int c = points[0] - 1; c > i; c--){
                        flipPosition(arrayBoard, c, points[1]);
                        totalFlip++;
                    }
                    break;
                }
                if (arrayBoard[i][points[1]] == 0){
                    break;
                }
            }
        }
        if (points[0] < 7 && points[1] < 7){ //evaluate to bottom right
            for (int i = points[0] + 1, j = points[1] + 1; i < 8 && j < 8; i++, j++){
                if (arrayBoard[i][j] == color){
                    for (int c = points[0] + 1, d = points[1] + 1; c < i && d < j; c++, d++){
                        flipPosition(arrayBoard, c, d);
                        totalFlip++;
                    }
                    break;
                }
                if (arrayBoard[i][j] == 0){
                    break;
                }
            }
        }
        if (points[0] > 0 && points[1] > 0){ //evaluate to upper left
            for (int i = points[0] - 1, j = points[1] - 1; i >= 0 && j >= 0; i--, j--){
                if (arrayBoard[i][j] == color){
                    for (int c = points[0] - 1, d = points[1] - 1; c > i && d > j; c--, d--){
                        flipPosition(arrayBoard, c, d);
                        totalFlip++;
                    }
                    break;
                }
                if (arrayBoard[i][j] == 0){
                    break;
                }
            }
        }
        if (points[0] < 7 && points[1] > 0){ //evaluate to bottom left
            for (int i = points[0] + 1, j = points[1] - 1; i < 8 && j >= 0; i++, j--){
                if (arrayBoard[i][j] == color){
                    for (int c = points[0] + 1, d = points[1] - 1; c < i && d > j; c++, d--){
                        flipPosition(arrayBoard, c, d);
                        totalFlip++;
                    }
                    break;
                }
                if (arrayBoard[i][j] == 0){
                    break;
                }
            }
        }
        if (points[0] > 0 && points[1] < 7){ //evaluate to upper right
            for (int i = points[0] - 1, j = points[1] + 1; i >= 0 && j < 8; i--, j++){
                if (arrayBoard[i][j] == color){
                    for (int c = points[0] - 1, d = points[1] + 1; c > i && d < j; c--, d++){
                        flipPosition(arrayBoard, c, d);
                        totalFlip++;
                    }
                    break;
                }
                if (arrayBoard[i][j] == 0){
                    break;
                }
            }
        }
        return totalFlip; //returns the number of pieces that were flipped for evaluation
    }
    
    public int getFlips(int[] points, int color) {
        int[][] tempBoard = makeBoardCopy(arrayBoard);
        tempBoard[points[0]][points[1]] = color; //adds the new piece to the board
        int totalFlip = 0; 
        if (points[1] < 7){ //evaluate to the right
            for(int i = points[1] + 1; i < 8; i++){
                if (tempBoard[points[0]][i] == color){
                    for(int c = points[1] + 1; c < i; c++){
                        flipPosition(tempBoard, points[0], c);
                        totalFlip++;
                    }
                    break;
                }
                if (tempBoard[points[0]][i] == 0){
                    break;
                }
            }
        }
        if (points[1] > 0){ //evaluate to the left
            for (int i = points[1] - 1; i >= 0; i--){
                if (tempBoard[points[0]][i] == color){
                    for (int c = points[1] - 1; c > i; c--){
                        flipPosition(tempBoard, points[0], c);
                        totalFlip++;
                    }
                    break;
                }
                if (tempBoard[points[0]][i] == 0){
                    break;
                }
            }
        }
        if (points[0] < 7){ //evaluate beneath
            for (int i = points[0] + 1; i < 8; i++){
                if (tempBoard[i][points[1]] == color){
                    for (int c = points[0] + 1; c < i; c++){
                        flipPosition(tempBoard, c, points[1]);
                        totalFlip++;
                    }
                    break;
                }
                if (tempBoard[i][points[1]] == 0){
                    break;
                }
            }
        }
        if (points[0] > 0){ //evaluate above
            for (int i = points[0] - 1; i >= 0; i--){
                if(tempBoard[i][points[1]] == color){
                    for (int c = points[0] - 1; c > i; c--){
                        flipPosition(tempBoard, c, points[1]);
                        totalFlip++;
                    }
                    break;
                }
                if (tempBoard[i][points[1]] == 0){
                    break;
                }
            }
        }
        if (points[0] < 7 && points[1] < 7){ //evaluate to bottom right
            for (int i = points[0] + 1, j = points[1] + 1; i < 8 && j < 8; i++, j++){
                if (tempBoard[i][j] == color){
                    for (int c = points[0] + 1, d = points[1] + 1; c < i && d < j; c++, d++){
                        flipPosition(tempBoard, c, d);
                        totalFlip++;
                    }
                    break;
                }
                if (tempBoard[i][j] == 0){
                    break;
                }
            }
        }
        if (points[0] > 0 && points[1] > 0){ //evaluate to upper left
            for (int i = points[0] - 1, j = points[1] - 1; i >= 0 && j >= 0; i--, j--){
                if (tempBoard[i][j] == color){
                    for (int c = points[0] - 1, d = points[1] - 1; c > i && d > j; c--, d--){
                        flipPosition(tempBoard, c, d);
                        totalFlip++;
                    }
                    break;
                }
                if (tempBoard[i][j] == 0){
                    break;
                }
            }
        }
        if (points[0] < 7 && points[1] > 0){ //evaluate to bottom left
            for (int i = points[0] + 1, j = points[1] - 1; i < 8 && j >= 0; i++, j--){
                if (tempBoard[i][j] == color){
                    for (int c = points[0] + 1, d = points[1] - 1; c < i && d > j; c++, d--){
                        flipPosition(tempBoard, c, d);
                        totalFlip++;
                    }
                    break;
                }
                if (tempBoard[i][j] == 0){
                    break;
                }
            }
        }
        if (points[0] > 0 && points[1] < 7){ //evaluate to upper right
            for (int i = points[0] - 1, j = points[1] + 1; i >= 0 && j < 8; i--, j++){
                if (tempBoard[i][j] == color){
                    for (int c = points[0] - 1, d = points[1] + 1; c > i && d < j; c--, d++){
                        flipPosition(tempBoard, c, d);
                        totalFlip++;
                    }
                    break;
                }
                if (tempBoard[i][j] == 0){
                    break;
                }
            }
        }
        return totalFlip; //returns the number of pieces that were flipped for evaluation
    }
  
  
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton exitButton;
    private javax.swing.JButton jButton1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu5;
    private javax.swing.JMenuBar jMenuBar1;
    public javax.swing.JPanel jPanel3;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JButton resetButton;
    public javax.swing.JTextField score1Field;
    public javax.swing.JTextField score2Field;
    private javax.swing.JTextField scoreField1;
    private javax.swing.JTextField scoreField2;
    public javax.swing.JButton tile_0_0;
    public javax.swing.JButton tile_0_1;
    public javax.swing.JButton tile_0_2;
    public javax.swing.JButton tile_0_3;
    public javax.swing.JButton tile_0_4;
    public javax.swing.JButton tile_0_5;
    public javax.swing.JButton tile_0_6;
    public javax.swing.JButton tile_0_7;
    public javax.swing.JButton tile_1_0;
    public javax.swing.JButton tile_1_1;
    public javax.swing.JButton tile_1_2;
    public javax.swing.JButton tile_1_3;
    public javax.swing.JButton tile_1_4;
    public javax.swing.JButton tile_1_5;
    public javax.swing.JButton tile_1_6;
    public javax.swing.JButton tile_1_7;
    public javax.swing.JButton tile_2_0;
    public javax.swing.JButton tile_2_1;
    public javax.swing.JButton tile_2_2;
    public javax.swing.JButton tile_2_3;
    public javax.swing.JButton tile_2_4;
    public javax.swing.JButton tile_2_5;
    public javax.swing.JButton tile_2_6;
    public javax.swing.JButton tile_2_7;
    public javax.swing.JButton tile_3_0;
    public javax.swing.JButton tile_3_1;
    public javax.swing.JButton tile_3_2;
    public javax.swing.JButton tile_3_3;
    public javax.swing.JButton tile_3_4;
    public javax.swing.JButton tile_3_5;
    public javax.swing.JButton tile_3_6;
    public javax.swing.JButton tile_3_7;
    public javax.swing.JButton tile_4_0;
    public javax.swing.JButton tile_4_1;
    public javax.swing.JButton tile_4_2;
    public javax.swing.JButton tile_4_3;
    public javax.swing.JButton tile_4_4;
    public javax.swing.JButton tile_4_5;
    public javax.swing.JButton tile_4_6;
    public javax.swing.JButton tile_4_7;
    public javax.swing.JButton tile_5_0;
    public javax.swing.JButton tile_5_1;
    public javax.swing.JButton tile_5_2;
    public javax.swing.JButton tile_5_3;
    public javax.swing.JButton tile_5_4;
    public javax.swing.JButton tile_5_5;
    public javax.swing.JButton tile_5_6;
    public javax.swing.JButton tile_5_7;
    public javax.swing.JButton tile_6_0;
    public javax.swing.JButton tile_6_1;
    public javax.swing.JButton tile_6_2;
    public javax.swing.JButton tile_6_3;
    public javax.swing.JButton tile_6_4;
    public javax.swing.JButton tile_6_5;
    public javax.swing.JButton tile_6_6;
    public javax.swing.JButton tile_6_7;
    public javax.swing.JButton tile_7_0;
    public javax.swing.JButton tile_7_1;
    public javax.swing.JButton tile_7_2;
    public javax.swing.JButton tile_7_3;
    public javax.swing.JButton tile_7_4;
    public javax.swing.JButton tile_7_5;
    public javax.swing.JButton tile_7_6;
    public javax.swing.JButton tile_7_7;
    // End of variables declaration//GEN-END:variables
}